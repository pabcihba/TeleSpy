from telethon import TelegramClient, events
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
import json
import os
import asyncio
from datetime import datetime

#–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
api_id = '1234'
api_hash = '12341234'

#–º–µ–Ω—è–π –Ω–µ –º–µ–Ω—è–π —Ç–æ–ª–∫—É –Ω–µ—Ç
debug = 0

#–Ω–∏–∂–µ –Ω–µ —Å—Ç–æ–∏—Ç –º–µ–Ω—è—Ç—å
session_name = 'session_name'
spy_list_file = 'spy_list.json'
messages_cache_file = 'messages_cache.json'

#–æ –≤–µ–ª–∏–∫–∏–π –∏ –º–æ–≥—É—á–∏–π deepseek

class SpyClient:
    def __init__(self):
        self.client = TelegramClient(session_name, api_id, api_hash)
        self.spy_list = self.load_data(spy_list_file, [])
        self.messages_cache = self.load_data(messages_cache_file, {})
        self.admin_id = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º admin_id –∫–∞–∫ None

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.client.on(events.NewMessage)(self.handle_new_message)
        self.client.on(events.MessageEdited)(self.handle_edited_message)
        self.client.on(events.NewMessage)(self.handle_self_destruct_media)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        me = await self.client.get_me()
        self.admin_id = me.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à ID

    def load_data(self, filename, default):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        if os.path.exists(filename):
            try:
                with open(filename, 'r') as f:
                    data = f.read()
                    if data.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                        return json.loads(data)
                    else:
                        return default
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return default
        return default

    def save_data(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
            temp_filename = filename + ".tmp"
            with open(temp_filename, 'w') as f:
                json.dump(data, f)

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
            os.replace(temp_filename, filename)
        except Exception as e:
            if debug == 1:
                print(f"Error saving data to {filename}: {e}")

    async def handle_new_message(self, event):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if event.message.message.startswith(('.spy', '.unspy', '.spy_list')):
            await self.process_command(event)
        else:
            await self.cache_message(event)

    async def process_command(self, event):
        try:
            # –ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É
            sender = await event.get_sender()
            chat_id = event.chat_id
            command = event.message.message

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤—ã)
            if sender.id != self.admin_id:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –≤—ã

            # –ù–∞ –∫–æ–≥–æ –Ω–∞—Ü–µ–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
            if command == '.spy_list':
                await self.show_spy_list(event)
                await event.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
                return

            if event.is_reply:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                replied_message = await event.get_reply_message()
                target_user = await replied_message.get_sender()
            else:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                await event.reply("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return

            if command == '.spy':
                await self.add_to_spy_list(target_user, chat_id, event)
            elif command == '.unspy':
                await self.remove_from_spy_list(target_user, chat_id, event)

            await event.delete()

        except Exception as e:
            if debug == 1:
                print(f"Error processing command: {e}")


    async def show_spy_list(self, event):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤–∫–ª—é—á–µ–Ω–∞ —Å–ª–µ–∂–∫–∞."""
        try:
            if not self.spy_list:
                await self.client.send_message('me', "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
                return

            spy_list_message = "üïµÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for entry in self.spy_list:
                user_id, chat_id = entry
                try:
                    user = await self.client.get_entity(user_id)
                    username = user.username
                    if username:
                        spy_list_message += f"üë§ ID: {user_id},@{username}, \n"
                    else:
                        # –ï—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
                        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                        spy_list_message += f"üë§ ID: {user_id}, –ò–º—è: {full_name}\n"
                except Exception as e:
                    if debug == 1:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
                    spy_list_message += f"üë§ ID: {user_id}\n"

            await self.client.send_message('me', spy_list_message)
        except Exception as e:
            if debug == 1:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await self.client.send_message('me', "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    async def add_to_spy_list(self, target_user, chat_id, event):
        entry = [target_user.id, chat_id]
        if entry not in self.spy_list:
            self.spy_list.append(entry)
            self.save_data(spy_list_file, self.spy_list)
            username = target_user.username or target_user.first_name
            await self.client.send_message(
                'me',
                f'üïµÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!'
            )

    async def remove_from_spy_list(self, target_user, chat_id, event):
        entry = [target_user.id, chat_id]
        if entry in self.spy_list:
            self.spy_list.remove(entry)
            self.save_data(spy_list_file, self.spy_list)
            username = target_user.username or target_user.first_name
            await self.client.send_message(
                'me',
                f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!'
            )

    async def cache_message(self, event):
        try:
            sender = await event.get_sender()
            chat_id = event.chat_id
            if [sender.id, chat_id] in self.spy_list:
                message_id = str(event.message.id)
                chat_id_str = str(chat_id)

                if chat_id_str not in self.messages_cache:
                    self.messages_cache[chat_id_str] = {}


                self.messages_cache[chat_id_str][message_id] = {
                    'user_id': sender.id,
                    'text': event.message.text,
                    'media': event.message.media,
                    'date': event.message.date.isoformat()  #—Ç—É—Ç –¥–∞—Ç–∞
                }
                self.save_data(messages_cache_file, self.messages_cache)

        except Exception as e:
            if debug == 1:
                print(f"Error caching message: {e}")

    async def handle_edited_message(self, event):
        try:
            chat_id = event.chat_id
            message_id = str(event.message.id)
            chat_id_str = str(chat_id)

            if chat_id_str in self.messages_cache and message_id in self.messages_cache[chat_id_str]:
                cached = self.messages_cache[chat_id_str][message_id]
                user = await self.client.get_entity(cached['user_id'])

                if event.message.text != cached['text'] or event.message.media != cached['media']:

                    message = f"‚úèÔ∏è @{user.username} –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"

                    if event.message.text != cached['text']:
                        message += f"–ë—ã–ª–æ: üìù {cached['text']}\n"
                        message += f"üí¨ {event.message.text}\n\n"
                        message += f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

                    if event.message.media:
                        await self.client.send_message('me', message, file=event.message.media)
                    else:
                        await self.client.send_message('me', message)

                    #–¥–µ–ª–∞–µ–º –∫—ç—à
                    self.messages_cache[chat_id_str][message_id]['text'] = event.message.text
                    self.messages_cache[chat_id_str][message_id]['media'] = event.message.media
                    self.save_data(messages_cache_file, self.messages_cache)

        except Exception as e:
            if debug == 1:
                print(f"Error handling edit: {e}")

    async def check_deleted_messages(self):
        while True:
            try:
                for chat_id_str, messages in self.messages_cache.items():
                    chat_id = int(chat_id_str)
                    deleted_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                    for message_id_str, cached_message in list(messages.items()):
                        message_id = int(message_id_str)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                        try:
                            message = await self.client.get_messages(chat_id, ids=message_id)
                            if not message:
                                # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                                deleted_messages.append((message_id_str, cached_message))
                        except Exception as e:
                            if debug == 1:
                                print(f"Error checking message {message_id} in chat {chat_id}: {e}")

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    deleted_messages.sort(key=lambda x: x[1]['date'])

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
                    for message_id_str, cached_message in deleted_messages:
                        user = await self.client.get_entity(cached_message['user_id'])
                        if [cached_message['user_id'], chat_id] in self.spy_list:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                            info_message = f"üóë @{user.username} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

                            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ç–∏–∫–µ—Ä
                            if cached_message['media'] and hasattr(cached_message['media'], 'document'):
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                await self.client.send_message('me', info_message)
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                                await self.client.send_file('me', cached_message['media'])
                            else:
                                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –º–µ–¥–∏–∞
                                if cached_message['text']:
                                    info_message += f"üí¨ {cached_message['text']}"
                                await self.client.send_message('me', info_message, file=cached_message['media'])

                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                        del self.messages_cache[chat_id_str][message_id_str]
                        self.save_data(messages_cache_file, self.messages_cache)

                await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            except Exception as e:
                if debug == 1:
                    print(f"Error in check_deleted_messages: {e}")
                await asyncio.sleep(5)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    async def handle_self_destruct_media(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º
            if (
                event.message.media
                and hasattr(event.message.media, 'ttl_seconds')
                and event.message.media.ttl_seconds > 0  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –º–µ–¥–∏–∞
            ):
                # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
                media_path = await event.message.download_media(file="temp_media/")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                sender = await event.get_sender()
                username = sender.username or f"{sender.first_name or ''} {sender.last_name or ''}".strip()
                info_message = f"üì∏ @{username} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª
                await self.client.send_message('me', info_message, file=media_path)

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(media_path)
        except Exception as e:
            if debug == 1:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –º–µ–¥–∏–∞: {e}")

    async def run(self):
        await self.client.start()

        self.client.on(events.NewMessage)(self.handle_self_destruct_media)

        await self.client.run_until_disconnected()

async def main():
    spy_client = SpyClient()
    await spy_client.client.start()
    await spy_client.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º admin_id
    print("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    await spy_client.client.run_until_disconnected()

if __name__ == '__main__':
    spy_client = SpyClient()
    spy_client.client.loop.run_until_complete(main())
