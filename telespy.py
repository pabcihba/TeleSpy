from telethon import TelegramClient, events
from telethon.tl.types import PeerUser, PeerChat, PeerChannel
import json
import os
import asyncio
from datetime import datetime
import requests
import pytz

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏: /newbot –≤ @botfather)
BOT_TOKEN = '12345678_QWERTYUIOP'

# –í–∞—à ID –≤ Telegram (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –±–æ—Ç–∞ @userinfobot)
YOUR_CHAT_ID = 123456789

# –î–∞–Ω–Ω—ã–µ –∏–∑ my.telegram.org/apps
api_id = '1234'
api_hash = '12341234'

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≤ –∫–æ–º–∞–Ω–¥–∞—Ö? 0 = –Ω–µ—Ç , 1 = –¥–∞
help_message = 1

session_name = 'session_name'
spy_list_file = 'spy_list.json'
messages_cache_file = 'messages_cache.json'

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
debug = 0

class SpyClient:
    def __init__(self):
        self.client = TelegramClient(session_name, api_id, api_hash)
        self.spy_list = self.load_data(spy_list_file, [])
        self.messages_cache = self.load_data(messages_cache_file, {})
        self.admin_id = None
        self.main_menu_message_id = None  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        self.ignore_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        self.client.on(events.NewMessage)(self.handle_new_message)
        self.client.on(events.MessageEdited)(self.handle_edited_message)
        self.client.on(events.NewMessage)(self.handle_self_destruct_media)

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        me = await self.client.get_me()
        self.admin_id = me.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        await self.send_message_via_bot("‚úÖ TeleSpy –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

        if help_message != 0:
            await self.send_message_via_bot("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚ùì\n\nüïµ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–∂–∫–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π [.spy] –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\nüîî –í —ç—Ç–æ—Ç –±–æ—Ç –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±:\n‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\nüóëÔ∏è–£–¥–∞–ª–µ–Ω–∏—è—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n\nüî• –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–µ—Å—è –º–µ–¥–∏–∞ —Å–∫–∞—á–∏–≤–∞—é—Ç—Å—è —Å–∞–º–∏ –∏ —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –±–æ—Ç\n\n–û—Ç–∫–ª—é—á–∏—Ç—å —Å–ª–µ–∂–∫—É –º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç–∏–≤ –∫–æ–º–∞–Ω–¥–æ–π [.unspy] –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üö´\n\nüìù –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π [.spy_list]\n\n‚ôªÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã [.scan]\n‚úÖ–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—Ç–∫–ª—é—á–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –Ω–∞ –≤—Ä–µ–º—è , –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –ø–æ–ª–æ–∂–µ–Ω–æ!\n\n–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ , –≤ —Ñ–∞–π–ª–µ telespy.py , —Å–º–µ–Ω–∏–≤ help_message –Ω–∞ 0")

    def load_data(self, filename, default):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        if os.path.exists(filename):
            try:
                with open(filename, 'r') as f:
                    data = f.read()
                    return json.loads(data) if data.strip() else default
            except json.JSONDecodeError:
                return default
        return default

    def save_data(self, filename, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª."""
        try:
            temp_filename = filename + ".tmp"
            with open(temp_filename, 'w') as f:
                json.dump(data, f)
            os.replace(temp_filename, filename)
        except Exception as e:
            if debug:
                print(f"Error saving data to {filename}: {e}")

    async def send_message_via_bot(self, text, file=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞."""
        if file and os.path.exists(file):  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto' if file.lower().endswith(('.png', '.jpg', '.jpeg')) else f'https://api.telegram.org/bot{BOT_TOKEN}/sendDocument'
            try:
                with open(file, 'rb') as f:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    files = {'photo' if url.endswith('sendPhoto') else 'document': f}
                    data = {'chat_id': YOUR_CHAT_ID, 'caption': text}  # –ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
                    response = requests.post(url, files=files, data=data)
                    if response.status_code != 200:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {response.text}")
            except FileNotFoundError:
                print(f"–§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        else:  # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
            data = {
                'chat_id': YOUR_CHAT_ID,
                'text': text
            }
            try:
                response = requests.post(url, data=data)
                if response.status_code != 200:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def handle_new_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if event.message.message.startswith(('.spy', '.unspy', '.spy_list', '.scan')):
            await self.process_command(event)
        else:
            await self.cache_message(event)

    async def process_command(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã."""
        sender = await event.get_sender()
        if sender.id != self.admin_id:
            return

        if event.message.message == '.spy_list':
            await self.show_spy_list(event)
            await event.delete()
            return

        if event.message.message == '.scan':
            await self.scan_chat(event)
            await event.delete()
            return

        if not event.is_reply:
            await self.send_message_via_bot("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        replied_message = await event.get_reply_message()
        target_user = await replied_message.get_sender()

        if event.message.message == '.spy':
            await self.add_to_spy_list(target_user, event.chat_id, event)
        elif event.message.message == '.unspy':
            await self.remove_from_spy_list(target_user, event.chat_id, event)

        await event.delete()

    async def scan_chat(self, event):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤–µ—Å—å —á–∞—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        chat_id = event.chat_id
        chat_id_str = str(chat_id)

        if chat_id_str not in self.messages_cache:
            self.messages_cache[chat_id_str] = {}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
        messages = []
        async for message in self.client.iter_messages(chat_id, limit=100):  # –õ–∏–º–∏—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
            messages.append(message)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        messages.sort(key=lambda msg: msg.date)

        # –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for message in messages:
            message_id = str(message.id)
            if message_id in self.messages_cache[chat_id_str]:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

            sender = await message.get_sender()
            if [sender.id, chat_id] in self.spy_list:
                media_path = None
                if message.media:
                    try:
                        media_path = await message.download_media(file=f"temp_media/{chat_id_str}_{message_id}")
                    except Exception as e:
                        if debug:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                utc_date = message.date  # –î–∞—Ç–∞ –≤ UTC
                local_tz = pytz.timezone('Europe/Moscow')  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                local_date = utc_date.replace(tzinfo=pytz.utc).astimezone(local_tz)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à —Å –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                self.messages_cache[chat_id_str][message_id] = {
                    'user_id': sender.id,
                    'text': message.text,
                    'media_path': media_path,
                    'date_sent': local_date.isoformat(),  # –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    'date_deleted': None  # –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)
                }

        self.save_data(messages_cache_file, self.messages_cache)
        await self.send_message_via_bot(f"‚úÖ –ß–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω")

    async def check_deleted_messages(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—ç—à–µ."""
        while True:
            try:
                for chat_id_str, messages in list(self.messages_cache.items()):
                    chat_id = int(chat_id_str)
                    deleted_messages = []

                    for message_id_str, cached_message in list(messages.items()):
                        message_id = int(message_id_str)
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                            message = await self.client.get_messages(chat_id, ids=message_id)
                            if message is None:  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫—ç—à–µ
                                if 'date_sent' not in cached_message:
                                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    self.ignore_messages[message_id_str] = self.ignore_messages.get(message_id_str, 0) + 1
                                    if self.ignore_messages[message_id_str] <= 5:
                                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                                    continue

                                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ –±–æ–ª–µ–µ 5 —Ä–∞–∑, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
                                if self.ignore_messages.get(message_id_str, 0) > 5:
                                    continue

                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                                utc_now = datetime.now(pytz.utc)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
                                local_tz = pytz.timezone('Europe/Moscow')  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                                local_now = utc_now.astimezone(local_tz)

                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è
                                cached_message['date_deleted'] = local_now.isoformat()
                                deleted_messages.append((message_id_str, cached_message))
                        except Exception as e:
                            if debug:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
                            continue

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                    deleted_messages.sort(key=lambda x: datetime.fromisoformat(x[1]['date_sent']))

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message_id_str, cached_message in deleted_messages:
                        user = await self.client.get_entity(cached_message['user_id'])
                        username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å "@", –µ—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –µ—Å—Ç—å
                        display_name = f"@{username}" if user.username else username

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –¥–∞—Ç–æ–π —É–¥–∞–ª–µ–Ω–∏—è
                        date_sent = datetime.fromisoformat(cached_message['date_sent']).strftime('%Y-%m-%d %H:%M:%S')
                        date_deleted = datetime.fromisoformat(cached_message['date_deleted']).strftime('%Y-%m-%d %H:%M:%S')
                        info_message = (
                            f"üóë {display_name} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
                            f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {date_sent}\n"
                            f"üóìÔ∏è –£–¥–∞–ª–µ–Ω–æ: {date_deleted}\n\n"
                        )
                        if cached_message['text']:
                            info_message += f"üí¨ {cached_message['text']}\n\n"

                        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                        if cached_message['media_path'] and os.path.exists(cached_message['media_path']):
                            await self.send_message_via_bot(info_message, file=cached_message['media_path'])
                        else:
                            await self.send_message_via_bot(info_message)

                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
                        del self.messages_cache[chat_id_str][message_id_str]

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
                    if not self.messages_cache[chat_id_str]:  # –ï—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫—ç—à–∞
                        del self.messages_cache[chat_id_str]
                    self.save_data(messages_cache_file, self.messages_cache)

                await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                if debug:
                    print(f"–û—à–∏–±–∫–∞ –≤ check_deleted_messages: {e}")
                await asyncio.sleep(10)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    async def show_spy_list(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        if not self.spy_list:
            await self.send_message_via_bot("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        spy_list_message = "üïµÔ∏è –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user_id, chat_id in self.spy_list:
            try:
                user = await self.client.get_entity(user_id)
                username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
                spy_list_message += f"üë§ ID: {user_id}, @{username}\n"
            except Exception as e:
                if debug:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
                spy_list_message += f"üë§ ID: {user_id}\n"

        await self.send_message_via_bot(spy_list_message)

    async def add_to_spy_list(self, target_user, chat_id, event):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
        entry = [target_user.id, chat_id]
        if entry not in self.spy_list:
            self.spy_list.append(entry)
            self.save_data(spy_list_file, self.spy_list)
            username = target_user.username or f"{target_user.first_name or ''} {target_user.last_name or ''}".strip()
            display_name = f"@{username}" if target_user.username else username
            await self.send_message_via_bot(f'üïµÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!')

    async def remove_from_spy_list(self, target_user, chat_id, event):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
        entry = [target_user.id, chat_id]
        if entry in self.spy_list:
            self.spy_list.remove(entry)
            self.save_data(spy_list_file, self.spy_list)
            username = target_user.username or f"{target_user.first_name or ''} {target_user.last_name or ''}".strip()
            display_name = f"@{username}" if target_user.username else username
            await self.send_message_via_bot(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!')

    async def cache_message(self, event):
        """–ö—ç—à–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        sender = await event.get_sender()
        chat_id = event.chat_id
        if [sender.id, chat_id] in self.spy_list:
            message_id = str(event.message.id)
            chat_id_str = str(chat_id)

            if chat_id_str not in self.messages_cache:
                self.messages_cache[chat_id_str] = {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ ID –≤ –∫—ç—à–µ
            if message_id in self.messages_cache[chat_id_str]:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –Ω–∞ –¥–∏—Å–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            media_path = None
            if event.message.media:
                try:
                    media_path = await event.message.download_media(file=f"temp_media/{chat_id_str}_{message_id}")
                except Exception as e:
                    if debug:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            utc_date = event.message.date  # –î–∞—Ç–∞ –≤ UTC
            local_tz = pytz.timezone('Europe/Moscow')  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            local_date = utc_date.replace(tzinfo=pytz.utc).astimezone(local_tz)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫—ç—à —Å –¥–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.messages_cache[chat_id_str][message_id] = {
                'user_id': sender.id,
                'text': event.message.text,
                'media_path': media_path,  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É –º–µ–¥–∏–∞
                'date_sent': local_date.isoformat(),  # –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                'date_deleted': None  # –î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)
            }
            self.save_data(messages_cache_file, self.messages_cache)

    async def handle_edited_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        chat_id_str = str(event.chat_id)
        message_id = str(event.message.id)

        if chat_id_str in self.messages_cache and message_id in self.messages_cache[chat_id_str]:
            cached = self.messages_cache[chat_id_str][message_id]
            user = await self.client.get_entity(cached['user_id'])

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å "@", –µ—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –µ—Å—Ç—å
            username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
            display_name = f"@{username}" if user.username else username

            if event.message.text != cached['text']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
                message = f"‚úèÔ∏è {display_name} –∏–∑–º–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                message += f"–ë—ã–ª–æ: {cached['text']}\nüí¨ {event.message.text}\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                if cached['media_path'] and os.path.exists(cached['media_path']):
                    await self.send_message_via_bot(message, file=cached['media_path'])
                else:
                    await self.send_message_via_bot(message)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.messages_cache[chat_id_str][message_id]['text'] = event.message.text
            self.save_data(messages_cache_file, self.messages_cache)

    async def handle_self_destruct_media(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–∞—é—â–∏–µ—Å—è –º–µ–¥–∏–∞."""
        if event.message.media and hasattr(event.message.media, 'ttl_seconds'):
            ttl_seconds = event.message.media.ttl_seconds
            if ttl_seconds is not None and ttl_seconds > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ttl_seconds –Ω–µ None –∏ –±–æ–ª—å—à–µ 0
                try:
                    media_path = await event.message.download_media(file="temp_media/")
                    sender = await event.get_sender()
                    username = sender.username or f"{sender.first_name or ''} {sender.last_name or ''}".strip()
                    display_name = f"@{username}" if sender.username else username
                    info_message = f"üì∏ {display_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    await self.send_message_via_bot(info_message, file=media_path)
                    os.remove(media_path)
                except Exception as e:
                    if debug:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –º–µ–¥–∏–∞: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç."""
        await self.client.start()
        asyncio.create_task(self.check_deleted_messages())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.client.run_until_disconnected()

async def main():
    spy_client = SpyClient()
    await spy_client.client.start()
    await spy_client.initialize()
    print("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    await spy_client.run()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ run, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç check_deleted_messages

if __name__ == '__main__':
    spy_client = SpyClient()
    spy_client.client.loop.run_until_complete(main())
